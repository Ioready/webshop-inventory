{"version":3,"file":"static/js/349.d3c5e4c4.chunk.js","mappings":"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","sources":["screens/scanner/FormData.tsx","screens/scanner/FormDataLapsData.tsx","screens/scanner/index.tsx"],"sourcesContent":["import { useState, useRef, useEffect } from \"react\";\r\nimport { Modal } from \"antd\";\r\nimport { InputBox, ButtonBox } from \"../../components/RenderFroms\";\r\nimport { Formik, FieldArray } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { BsQrCode } from \"react-icons/bs\";\r\nimport { Button } from \"antd\";\r\nimport { QrReader } from 'react-qr-reader';\r\nconst mobileKeywords = ['Mobi', 'Android', 'iPhone', 'iPad', 'Windows Phone'];\r\nconst tabletKeywords = ['iPad', 'Tablet', 'Android'];\r\n\r\nconst newStore = {\r\n    location: \"\",\r\n    qty: \"1\",\r\n    laps: \"0\"\r\n}\r\n\r\nconst initialData = {\r\n    stores: [newStore],\r\n}\r\n\r\nexport function FormData({ initialValues, handleUpdate, loading }: any) {\r\n    \r\n    const ref = useRef<any>(null);\r\n    const fieldArrayRef = useRef<any>(null);\r\n    const useEffectRef = useRef<boolean>(initialValues?.stores && initialValues.stores[0] ? false : true);\r\n    const { userAgent } = window.navigator;\r\n    const isMobile = mobileKeywords.some(keyword => userAgent.includes(keyword));\r\n    const isTablet = tabletKeywords.some(keyword => userAgent.includes(keyword));\r\n    const [code, setCode] = useState<any>(false);\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        stores: Yup.array().of(\r\n            Yup.object().shape({\r\n                location: Yup.string().required(\"Location is required\"),\r\n                qty: Yup.string().required(\"Quantity is required\")\r\n            })\r\n        )\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (!useEffectRef.current) {\r\n            useEffectRef.current = true\r\n            fieldArrayRef.current.push(newStore);\r\n        }\r\n    }, [fieldArrayRef]);\r\n\r\n    useEffect(() => {\r\n        if (useEffectRef.current) {\r\n            const inputElement = document.querySelector(`input[name=\"stores.0.location\"]`) as HTMLInputElement;\r\n            if (inputElement) {\r\n                inputElement.focus();\r\n            }\r\n        }\r\n    }, [useEffectRef]);\r\n\r\n    return (\r\n        <>\r\n            <Formik\r\n                initialValues={(initialValues?.stores && initialValues.stores[0]) ? initialValues : initialData}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values) => handleUpdate({ id: initialValues._id, stores: values.stores })}\r\n            >\r\n                {({ handleChange, handleBlur, handleSubmit, values, setFieldValue }) => (\r\n                    <>\r\n                    {console.log(values.stores, \" values \")\r\n                    }\r\n                        <FieldArray name=\"stores\">\r\n                            {({ remove, push }) => {\r\n                                fieldArrayRef.current = { remove, push };\r\n                                return <div>\r\n                                    {values.stores.length > 0 &&\r\n                                        values?.stores?.map((store: any, index: any) => (\r\n                                            <div className=\"row\" key={index}>\r\n                                                <div className=\"col-4\">\r\n                                                    <InputBox\r\n                                                        required\r\n                                                        autoFocus={useEffectRef.current}\r\n                                                        name={`stores.${index}.location`}\r\n                                                        label=\"Store Location\"\r\n                                                        placeholder=\"Store Location\"\r\n                                                    />\r\n                                                </div>\r\n                                                <div className=\"col-3\">\r\n                                                    <InputBox\r\n                                                        required\r\n                                                        type='number'\r\n                                                        name={`stores.${index}.qty`}\r\n                                                        label=\"Quantity\"\r\n                                                        placeholder=\"Quantity\"\r\n                                                    />\r\n                                                </div>\r\n                                                <div className=\"col-3\">\r\n                                                    <InputBox\r\n                                                        readOnly\r\n                                                        name={`stores.${index}.laps`}\r\n                                                        placeholder=\"Stock Out\"\r\n                                                        value={store.laps}\r\n                                                    />\r\n                                                </div>\r\n                                                <div className=\"col-2 d-flex align-items-center\">\r\n                                                    <Button type=\"primary\" danger onClick={() => remove(index)}>X</Button>\r\n                                                </div>\r\n                                            </div>\r\n                                        ))}\r\n                                    <Button type=\"primary\" onClick={() => push(newStore)} className=\"mb-3\">\r\n                                        ADD\r\n                                    </Button>\r\n                                </div>\r\n                            }}\r\n                        </FieldArray>\r\n                        <ButtonBox type=\"submit\" value='Update' loading={loading} onClick={handleSubmit} />\r\n                        {code && (<Modal\r\n                            open={true}\r\n                            onCancel={() => setCode(false)}\r\n                            footer={null}\r\n                        >\r\n                            <QrReader\r\n                                scanDelay={false}\r\n                                onResult={(result: any) => {\r\n                                    if (!!result) {\r\n                                        let stores = values?.stores\r\n                                        stores[code?.index] = { ...stores[code?.index], location: result?.text }\r\n                                        setFieldValue('stores', stores);\r\n                                        setCode(false)\r\n                                    }\r\n                                }}\r\n                                style={{ width: \"100%\" }}\r\n                                ref={ref}\r\n                                facingMode={isMobile || isTablet ? 'environment' : 'user'}\r\n                            />\r\n                        </Modal>)}\r\n                    </>\r\n                )}\r\n            </Formik>\r\n        </>\r\n    );\r\n}\r\n","import { InputBox, ButtonBox } from \"../../components/RenderFroms\";\r\nimport { Formik, FieldArray } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Button } from \"antd\";\r\n\r\nconst newStore = {\r\n  location: \"\",\r\n  qty: \"1\",\r\n  laps: \"0\",\r\n};\r\n\r\nconst initialData = {\r\n  stores: [newStore],\r\n};\r\n\r\nexport function FormDataLaps({ initialValues, handleUpdate, loading }: any) {\r\n    \r\n  const validationSchema = Yup.object().shape({\r\n    stores: Yup.array().of(\r\n      Yup.object().shape({\r\n        location: Yup.string().required(\"Location is required\"),\r\n        qty: Yup.string().required(\"Quantity is required\"),\r\n      })\r\n    ),\r\n  });\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={\r\n        initialValues?.stores && initialValues.stores[0]\r\n          ? initialValues\r\n          : initialData\r\n      }\r\n      validationSchema={validationSchema}\r\n      onSubmit={(values) =>\r\n        handleUpdate({ id: initialValues._id, stores: values.stores })\r\n      }\r\n    >\r\n      {({\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        values,\r\n        errors,\r\n        setFieldValue,\r\n      }) => (\r\n        <>\r\n          <FieldArray name=\"stores\">\r\n            {({ remove, push }) => (\r\n              <div>\r\n                {values.stores.length > 0 &&\r\n                  values?.stores?.map((store: any, index: any) => (\r\n                    <div className=\"row\" key={index}>\r\n                      <div className=\"col-5\">\r\n                        <InputBox\r\n                          readOnly\r\n                          name={`stores.${index}.location`}\r\n                          placeholder=\"Store Location\"\r\n                        />\r\n                      </div>\r\n\r\n                      <div className=\"col-2\">\r\n                        <InputBox\r\n                          readOnly\r\n                          name={`stores.${index}.qty`}\r\n                          placeholder=\"QTY\"\r\n                          value={Number(store.qty) - Number(store.laps)}\r\n                        />\r\n                      </div>\r\n\r\n                      <div className=\"col-5 d-flex align-items-center\">\r\n                        <Button\r\n                          type=\"primary\"\r\n                          onClick={() => {\r\n                            let stores = values?.stores;\r\n                            if (Number(stores[index].laps) > 0) {\r\n                              stores[index] = {\r\n                                ...stores[index],\r\n                                laps: String(Number(stores[index].laps) - 1),\r\n                              };\r\n                              setFieldValue(\"stores\", stores);\r\n                            }\r\n                          }}\r\n                        >\r\n                          -\r\n                        </Button>\r\n                        <div className=\"mx-2\">\r\n                          <InputBox\r\n                            type=\"number\"\r\n                            name={`stores.${index}.laps`}\r\n                            label=\"Stock Out\"\r\n                            placeholder=\"Stock Out\"\r\n                            onChange={(obj: any) => {\r\n                              let stores = values?.stores;\r\n                              if (\r\n                                Number(obj.target.value) >= 0 &&\r\n                                Number(stores[index].qty) >\r\n                                  Number(obj.target.value)\r\n                              ) {\r\n                                stores[index] = {\r\n                                  ...stores[index],\r\n                                  laps: String(obj.target.value),\r\n                                };\r\n                                setFieldValue(\"stores\", stores);\r\n                              }\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <Button\r\n                          type=\"primary\"\r\n                          onClick={() => {\r\n                            let stores = values?.stores;\r\n                            if (\r\n                              Number(stores[index].qty) >\r\n                              Number(stores[index].laps)\r\n                            ) {\r\n                              stores[index] = {\r\n                                ...stores[index],\r\n                                laps: String(Number(stores[index].laps) + 1),\r\n                              };\r\n                              setFieldValue(\"stores\", stores);\r\n                            }\r\n                          }}\r\n                        >\r\n                          +\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n              </div>\r\n            )}\r\n          </FieldArray>\r\n\r\n          <ButtonBox\r\n            type=\"submit\"\r\n            value=\"Update\"\r\n            loading={loading}\r\n            onClick={handleSubmit}\r\n          />\r\n        </>\r\n      )}\r\n    </Formik>\r\n  );\r\n}\r\n","\"use client\"\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport Breadcrumbs from \"../../components/Breadcrumbs\";\r\nimport { Spin, Input, Button } from \"antd\";\r\nimport { useFetchByLoad } from \"../../contexts\";\r\nimport { ViewData } from \"../products/ViewData\";\r\nimport { FormData } from \"./FormData\";\r\nimport { FormDataLaps } from \"./FormDataLapsData\";\r\nimport { EditDataModal } from \"../../components/Forms\";\r\nconst resource = \"products\";\r\n\r\nexport default function Lists() {\r\n  const { fetch, data, loading } = useFetchByLoad();\r\n  const [detail, setDetail] = useState<any>(null);\r\n  const [search, setSearch] = useState<any>(null);\r\n\r\n  let timer = useRef<any>(null)\r\n\r\n  const fetchData = (search: any) => {\r\n    clearTimeout(timer.current)\r\n    timer.current = setTimeout(() => {\r\n      fetch({ url: resource, query: JSON.stringify({ search }) })\r\n    }, 500)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (data?.count > 0) {\r\n      setSearch(null)\r\n    }\r\n  }, [data])\r\n\r\n  return (\r\n    <>\r\n      <Breadcrumbs pageName=\"Scanner\" />\r\n      <div className=\"viewDetails\">\r\n\r\n        <div className=\"viewDetails\">\r\n          <Input autoFocus placeholder=\"title / barcode / scancode / supplierref / brand / supplier\" value={search} onChange={(obj) => { setSearch(obj.target.value); fetchData(obj.target.value) }} />\r\n        </div>\r\n\r\n        {loading && (<div className=\"viewDetails\" style={{ textAlign: \"center\" }}><Spin /></div>)}\r\n        {(data && data?.data && data?.data[0]) ? (<div className=\"viewDetails\">\r\n          <div className=\"viewDetails\" style={{ textAlign: \"center\", display: 'flex', justifyContent: \"center\" }}><Button type=\"primary\" onClick={() => setDetail({ ...data?.data[0], \"edit\": true })}>Enter Store Location</Button>\r\n            <Button type=\"primary\" onClick={() => setDetail({ ...data?.data[0], \"editLaps\": true })} className=\"mx-4\">Enter Stock Out</Button></div>\r\n          <ViewData data={data.data[0]} />\r\n        </div>) : <div><h3 className=\"viewDetails\">No data found!</h3></div>}\r\n\r\n        {(detail && detail.edit) && (<EditDataModal resource={resource} close={() => { setDetail(null); fetchData(search) }} FormData={FormData} data={detail} />)}\r\n        {(detail && detail.editLaps) && (<EditDataModal resource={resource} close={() => { setDetail(null); fetchData(search) }} FormData={FormDataLaps} data={detail} />)}\r\n\r\n      </div>\r\n    </>\r\n  );\r\n}"],"names":["mobileKeywords","tabletKeywords","newStore","location","qty","laps","initialData","stores","FormData","_ref","initialValues","handleUpdate","loading","ref","useRef","fieldArrayRef","useEffectRef","userAgent","window","navigator","isMobile","some","keyword","includes","isTablet","code","setCode","useState","validationSchema","Yup","shape","of","required","useEffect","current","push","inputElement","document","querySelector","focus","_jsx","_Fragment","children","Formik","onSubmit","values","id","_id","_ref2","handleChange","handleBlur","handleSubmit","setFieldValue","_jsxs","console","log","FieldArray","name","_ref3","_values$stores","remove","length","map","store","index","className","InputBox","autoFocus","concat","label","placeholder","type","readOnly","value","Button","danger","onClick","ButtonBox","Modal","open","onCancel","footer","QrReader","scanDelay","onResult","result","text","style","width","facingMode","FormDataLaps","errors","Number","String","onChange","obj","target","resource","Lists","fetch","data","useFetchByLoad","detail","setDetail","search","setSearch","timer","fetchData","clearTimeout","setTimeout","url","query","JSON","stringify","count","Breadcrumbs","pageName","Input","textAlign","Spin","display","justifyContent","ViewData","edit","EditDataModal","close","editLaps"],"sourceRoot":""}