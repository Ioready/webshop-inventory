{"version":3,"file":"static/js/349.bee96c28.chunk.js","mappings":"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","sources":["screens/scanner/FormData.tsx","screens/scanner/FormDataLapsData.tsx","screens/scanner/index.tsx"],"sourcesContent":["import { useState, useRef, useEffect } from \"react\";\r\nimport { Modal } from \"antd\";\r\nimport { InputBox, ButtonBox } from \"../../components/RenderFroms\";\r\nimport { Formik, FieldArray } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { BsQrCode } from \"react-icons/bs\";\r\nimport { Button } from \"antd\";\r\nimport { QrReader } from 'react-qr-reader';\r\nconst mobileKeywords = ['Mobi', 'Android', 'iPhone', 'iPad', 'Windows Phone'];\r\nconst tabletKeywords = ['iPad', 'Tablet', 'Android'];\r\n\r\nconst newStore = {\r\n    location: \"\",\r\n    qty: \"1\",\r\n    laps: \"0\"\r\n}\r\n\r\nconst initialData = {\r\n    stores: [newStore],\r\n}\r\n\r\nexport function FormData({ initialValues, handleUpdate, loading }: any) {\r\n    \r\n    const ref = useRef<any>(null);\r\n    const fieldArrayRef = useRef<any>(null);\r\n    const useEffectRef = useRef<boolean>(initialValues?.stores && initialValues.stores[0] ? false : true);\r\n    const { userAgent } = window.navigator;\r\n    const isMobile = mobileKeywords.some(keyword => userAgent.includes(keyword));\r\n    const isTablet = tabletKeywords.some(keyword => userAgent.includes(keyword));\r\n    const [code, setCode] = useState<any>(false);\r\n\r\n    const validationSchema = Yup.object().shape({\r\n        stores: Yup.array().of(\r\n            Yup.object().shape({\r\n                location: Yup.string().required(\"Location is required\"),\r\n                qty: Yup.string().required(\"Quantity is required\")\r\n            })\r\n        )\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (!useEffectRef.current) {\r\n            useEffectRef.current = true\r\n            fieldArrayRef.current.push(newStore);\r\n        }\r\n    }, [fieldArrayRef]);\r\n\r\n    useEffect(() => {\r\n        if (useEffectRef.current) {\r\n            const inputElement = document.querySelector(`input[name=\"stores.0.location\"]`) as HTMLInputElement;\r\n            if (inputElement) {\r\n                inputElement.focus();\r\n            }\r\n        }\r\n    }, [useEffectRef]);\r\n\r\n    return (\r\n        <>\r\n            <Formik\r\n                initialValues={(initialValues?.stores && initialValues.stores[0]) ? initialValues : initialData}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values) => handleUpdate({ id: initialValues._id, stores: values.stores })}\r\n            >\r\n                {({ handleChange, handleBlur, handleSubmit, values, setFieldValue }) => (\r\n                    <>\r\n                    {console.log(values.stores, \" values \")\r\n                    }\r\n                        <FieldArray name=\"stores\">\r\n                            {({ remove, push }) => {\r\n                                fieldArrayRef.current = { remove, push };\r\n                                return <div>\r\n                                    {values.stores.length > 0 &&\r\n                                        values?.stores?.map((store: any, index: any) => (\r\n                                            <div className=\"row\" key={index}>\r\n                                                <div className=\"col-4\">\r\n                                                    <InputBox\r\n                                                        required\r\n                                                        autoFocus={useEffectRef.current}\r\n                                                        name={`stores.${index}.location`}\r\n                                                        label=\"Store Location\"\r\n                                                        placeholder=\"Store Location\"\r\n                                                    />\r\n                                                </div>\r\n                                                <div className=\"col-3\">\r\n                                                    <InputBox\r\n                                                        required\r\n                                                        type='number'\r\n                                                        name={`stores.${index}.qty`}\r\n                                                        label=\"Quantity\"\r\n                                                        placeholder=\"Quantity\"\r\n                                                    />\r\n                                                </div>\r\n                                                <div className=\"col-3\">\r\n                                                    <InputBox\r\n                                                        readOnly\r\n                                                        name={`stores.${index}.laps`}\r\n                                                        placeholder=\"Stock Out\"\r\n                                                        value={store.laps}\r\n                                                    />\r\n                                                </div>\r\n                                                <div className=\"col-2 d-flex align-items-center\">\r\n                                                    <Button type=\"primary\" danger onClick={() => remove(index)}>X</Button>\r\n                                                </div>\r\n                                            </div>\r\n                                        ))}\r\n                                    <Button type=\"primary\" onClick={() => push(newStore)} className=\"mb-3\">\r\n                                        ADD\r\n                                    </Button>\r\n                                </div>\r\n                            }}\r\n                        </FieldArray>\r\n                        <ButtonBox type=\"submit\" value='Update' loading={loading} onClick={handleSubmit} />\r\n                        {code && (<Modal\r\n                            open={true}\r\n                            onCancel={() => setCode(false)}\r\n                            footer={null}\r\n                        >\r\n                            <QrReader\r\n                                scanDelay={false}\r\n                                onResult={(result: any) => {\r\n                                    if (!!result) {\r\n                                        let stores = values?.stores\r\n                                        stores[code?.index] = { ...stores[code?.index], location: result?.text }\r\n                                        setFieldValue('stores', stores);\r\n                                        setCode(false)\r\n                                    }\r\n                                }}\r\n                                style={{ width: \"100%\" }}\r\n                                ref={ref}\r\n                                facingMode={isMobile || isTablet ? 'environment' : 'user'}\r\n                            />\r\n                        </Modal>)}\r\n                    </>\r\n                )}\r\n            </Formik>\r\n        </>\r\n    );\r\n}\r\n","import { InputBox, ButtonBox } from \"../../components/RenderFroms\";\r\nimport { Formik, FieldArray } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Button } from \"antd\";\r\n\r\nconst newStore = {\r\n  location: \"\",\r\n  qty: \"1\",\r\n  laps: \"0\",\r\n};\r\n\r\nconst initialData = {\r\n  stores: [newStore],\r\n};\r\n\r\nexport function FormDataLaps({ initialValues, handleUpdate, loading }: any) {\r\n    \r\n  const validationSchema = Yup.object().shape({\r\n    stores: Yup.array().of(\r\n      Yup.object().shape({\r\n        location: Yup.string().required(\"Location is required\"),\r\n        qty: Yup.string().required(\"Quantity is required\"),\r\n      })\r\n    ),\r\n  });\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={\r\n        initialValues?.stores && initialValues.stores[0]\r\n          ? initialValues\r\n          : initialData\r\n      }\r\n      validationSchema={validationSchema}\r\n      onSubmit={(values) =>\r\n        handleUpdate({ id: initialValues._id, stores: values.stores })\r\n      }\r\n    >\r\n      {({\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        values,\r\n        errors,\r\n        setFieldValue,\r\n      }) => (\r\n        <>\r\n          <FieldArray name=\"stores\">\r\n            {({ remove, push }) => (\r\n              <div>\r\n                {values.stores.length > 0 &&\r\n                  values?.stores?.map((store: any, index: any) => (\r\n                    <div className=\"row\" key={index}>\r\n                      <div className=\"col-5\">\r\n                        <InputBox\r\n                          readOnly\r\n                          name={`stores.${index}.location`}\r\n                          placeholder=\"Store Location\"\r\n                        />\r\n                      </div>\r\n\r\n                      <div className=\"col-2\">\r\n                        <InputBox\r\n                          readOnly\r\n                          name={`stores.${index}.qty`}\r\n                          placeholder=\"QTY\"\r\n                          value={Number(store.qty) - Number(store.laps)}\r\n                        />\r\n                      </div>\r\n\r\n                      <div className=\"col-5 d-flex align-items-center\">\r\n                        <Button\r\n                          type=\"primary\"\r\n                          onClick={() => {\r\n                            let stores = values?.stores;\r\n                            if (Number(stores[index].laps) > 0) {\r\n                              stores[index] = {\r\n                                ...stores[index],\r\n                                laps: String(Number(stores[index].laps) - 1),\r\n                              };\r\n                              setFieldValue(\"stores\", stores);\r\n                            }\r\n                          }}\r\n                        >\r\n                          -\r\n                        </Button>\r\n                        <div className=\"mx-2\">\r\n                          <InputBox\r\n                            type=\"number\"\r\n                            name={`stores.${index}.laps`}\r\n                            label=\"Stock Out\"\r\n                            placeholder=\"Stock Out\"\r\n                            onChange={(obj: any) => {\r\n                              let stores = values?.stores;\r\n                              if (\r\n                                Number(obj.target.value) >= 0 &&\r\n                                Number(stores[index].qty) >\r\n                                  Number(obj.target.value)\r\n                              ) {\r\n                                stores[index] = {\r\n                                  ...stores[index],\r\n                                  laps: String(obj.target.value),\r\n                                };\r\n                                setFieldValue(\"stores\", stores);\r\n                              }\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <Button\r\n                          type=\"primary\"\r\n                          onClick={() => {\r\n                            let stores = values?.stores;\r\n                            if (\r\n                              Number(stores[index].qty) >\r\n                              Number(stores[index].laps)\r\n                            ) {\r\n                              stores[index] = {\r\n                                ...stores[index],\r\n                                laps: String(Number(stores[index].laps) + 1),\r\n                              };\r\n                              setFieldValue(\"stores\", stores);\r\n                            }\r\n                          }}\r\n                        >\r\n                          +\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n              </div>\r\n            )}\r\n          </FieldArray>\r\n\r\n          <ButtonBox\r\n            type=\"submit\"\r\n            value=\"Update\"\r\n            loading={loading}\r\n            onClick={handleSubmit}\r\n          />\r\n        </>\r\n      )}\r\n    </Formik>\r\n  );\r\n}\r\n","\"use client\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport Breadcrumbs from \"../../components/Breadcrumbs\";\r\nimport { Spin, Input, Button, Select, Descriptions, Row, Col } from \"antd\";\r\nimport { useFetchByLoad, usePatch } from \"../../contexts\";\r\nimport { ViewData } from \"../products/ViewData\";\r\nimport { FormData } from \"./FormData\";\r\nimport { FormDataLaps } from \"./FormDataLapsData\";\r\nimport { EditDataModal } from \"../../components/Forms\";\r\nimport { Checkbox, Form } from 'antd';\r\nimport { CloseOutlined } from '@ant-design/icons';\r\nimport { platform } from \"os\";\r\nconst { Option } = Select;\r\nconst resource = \"products\";\r\n\r\ninterface OptionType {\r\n  value: string;\r\n  label: string;\r\n}\r\n\r\nexport default function Lists() {\r\n  const { fetch, data, loading } = useFetchByLoad();\r\n  const { edit, data :patchData, loading:patchLoading} = usePatch();\r\n  const [detail, setDetail] = useState<any>(null);\r\n  const [search, setSearch] = useState<string | null>(null);\r\n  const [isStockOut, setIsStockOut] = useState(false);\r\n  const [options, setOptions] = useState<OptionType[]>([\r\n    { value: \"Out\", label: \"Out\" },\r\n    { value: \"Not available\", label: \"Not available\" },\r\n    { value: \"available in week.......\", label: \"available in week.......\" },\r\n  ]);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [selectedOption, setSelectedOption] = useState('');\r\n\r\n  const initialPlatforms = data && data.data ? data.data[0]?.platform?.split(\",\") : [];\r\n  const [selectedPlatforms, setSelectedPlatforms] = useState<string[]>(initialPlatforms);\r\n  // const handleUpdate = () => {\r\n  //   if (inputValue.trim() !== '') {\r\n  //     setDropdownOptions([...dropdownOptions, inputValue]);\r\n  //     setInputValue('');\r\n  //   }\r\n  // };\r\n\r\n  // const handleSelectChange = (value: any) => {\r\n  //   console.log('Selected:', value);\r\n  // };\r\n\r\n  useEffect(() => {\r\n    // Load data from local storage when the component mounts\r\n    const savedInputValue = localStorage.getItem('inputValue');\r\n    const savedSelectedOption = localStorage.getItem('selectedOption');\r\n    if (savedInputValue && savedSelectedOption) {\r\n      setInputValue(savedInputValue);\r\n      setSelectedOption(savedSelectedOption);\r\n    }\r\n  }, []);\r\n\r\n  let timer = useRef<number | undefined>(undefined);\r\n\r\n  const editProduct = (checkedValues:any) => {\r\n    edit(resource, { platform: checkedValues.join(\",\"), _id: data?.data[0]?._id });\r\n    setSelectedPlatforms(checkedValues);\r\n    // fetchData(search);\r\n  };\r\n\r\n  const statment = () => {\r\n    edit(resource, { stockedOutStatment: inputValue, _id: data?.data[0]?._id });\r\n    // fetchData(search);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (data?.count > 0) {\r\n      setSearch(null);\r\n    }\r\n  }, [data]);\r\n\r\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = event.target.value;\r\n    setSearch(value);\r\n    fetchData(value);\r\n\r\n  };\r\n\r\n    const fetchData = (search: string | null) => {\r\n    clearTimeout(timer.current);\r\n    timer.current = window.setTimeout(() => {\r\n      fetch({ url: resource, query: JSON.stringify({ search }) });\r\n    }, 500);\r\n  };\r\n\r\n  const handleRemoveOption = (value: string) => {\r\n    const updatedOptions = options.filter((option) => option.value !== value);\r\n    setOptions(updatedOptions);\r\n  };\r\n  const handleUpdate = () => {\r\n    // Update state with new input value and selected option\r\n    setInputValue(selectedOption);\r\n    setSelectedOption(selectedOption);\r\n  \r\n    // Save data to local storage\r\n    localStorage.setItem('inputValue', inputValue);\r\n    localStorage.setItem('selectedOption', selectedOption);\r\n  };\r\n\r\n  const handleDetailClose = () => {\r\n    setDetail(null);\r\n    fetchData(search);\r\n  };\r\n\r\n \r\n  return (\r\n    <>\r\n      <Breadcrumbs pageName=\"Scanner\" />\r\n      <div className=\"viewDetails\">\r\n        <Input\r\n          autoFocus\r\n          placeholder=\"title / barcode / scancode / supplierref / brand / supplier\"\r\n          value={search || \"\"}\r\n          onChange={handleSearchChange}\r\n        />\r\n\r\n        {loading && (\r\n          <div className=\"viewDetails\" style={{ textAlign: \"center\" }}>\r\n            <Spin />\r\n          </div>\r\n        )}\r\n\r\n        {data && data.data && data.data[0] ? (\r\n          <div className=\"viewDetails\">\r\n            <Row gutter={[16, 16]} align=\"middle\" justify=\"center\">\r\n              <Col xs={24}>\r\n                <div style={{ display: \"flex\", flexWrap: \"wrap\", justifyContent: \"start\" }}>\r\n                  <Form.Item style={{ margin: \"10px\" }}>\r\n                    <Checkbox.Group onChange={editProduct} value={selectedPlatforms}>\r\n                      <Checkbox value=\"amazon\" style={{ marginRight: \"10px\" }}>Amazon</Checkbox>\r\n                      <Checkbox value=\"bol.com\">Bol.com</Checkbox>\r\n                      <Checkbox value=\"Webshop\">Webshop</Checkbox>\r\n                    </Checkbox.Group>\r\n                  </Form.Item>\r\n\r\n                  <Button\r\n                    type=\"primary\"\r\n                    onClick={() => setDetail({ ...data?.data[0], edit: true })}\r\n                    style={{ margin: \"10px\" }}\r\n                  >\r\n                    Enter Store Location\r\n                  </Button>\r\n\r\n                  <Button\r\n                    type=\"primary\"\r\n                    onClick={() => setDetail({ ...data?.data[0], editLaps: true })}\r\n                    style={{ margin: \"10px\" }}\r\n                  >\r\n                    Enter Stock Out\r\n                  </Button>\r\n\r\n                  {!isStockOut ? (\r\n                    <Button\r\n                      type=\"primary\"\r\n                      onClick={() => setIsStockOut(true)}\r\n                      style={{ margin: \"10px\" }}\r\n                    >\r\n                      Sold out\r\n                    </Button>\r\n                  ) : (\r\n                    <Button\r\n                      type=\"primary\"\r\n                      style={{ backgroundColor: \"#ff4d4f\", borderColor: \"#ff4d4f\", margin: \"10px\" }}\r\n                      icon={<CloseOutlined />}\r\n                    >\r\n                      Sold out\r\n                    </Button>\r\n                  )}\r\n\r\n                  {isStockOut && (\r\n                    <div style={{ marginLeft: \"10px\", margin: \"10px\", display: \"flex\",flexWrap: \"wrap\",  alignItems: \"center\" }}>\r\n                      <Input placeholder=\"Enter details here...\" onChange={(e)=>{setInputValue(e.target.value);}} style={{width: \"150px\", marginRight: \"10px\" }} />\r\n                    \r\n                      <Select  value={selectedOption} style={{ width: \"150px\", marginRight: \"10px\" }} onChange={(value) => setSelectedOption(value)}>\r\n                        <Option value=\"\">Select Option</Option>\r\n                        {options.map((option) => (\r\n                          <Option key={option.value} value={option.value}>\r\n                            {option.label}\r\n                            {/* <CloseOutlined\r\n                              style={{ marginLeft: \"8px\", cursor: \"pointer\" }}\r\n                              onClick={(e) => {\r\n                                e.stopPropagation();\r\n                                handleRemoveOption(option.value);\r\n                              }}\r\n                            /> */}\r\n                          </Option>\r\n                        ))}\r\n                      </Select>\r\n                      <Button type=\"primary\" onClick={()=>{handleUpdate() ; statment();}}>Update</Button>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n            <h3>{data.data[0]?.stockedOutStatment}</h3>\r\n            <ViewData data={data.data[0]} />\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <h3 className=\"viewDetails\">No data found!</h3>\r\n          </div>\r\n        )}\r\n\r\n        {detail && detail.edit && (\r\n          <EditDataModal\r\n            resource={resource}\r\n            close={handleDetailClose}\r\n            FormData={FormData}\r\n            data={detail}\r\n          />\r\n        )}\r\n\r\n        {detail && detail.editLaps && (\r\n          <EditDataModal\r\n            resource={resource}\r\n            close={handleDetailClose}\r\n            FormData={FormDataLaps}\r\n            data={detail}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n"],"names":["mobileKeywords","tabletKeywords","newStore","location","qty","laps","initialData","stores","FormData","_ref","initialValues","handleUpdate","loading","ref","useRef","fieldArrayRef","useEffectRef","userAgent","window","navigator","isMobile","some","keyword","includes","isTablet","code","setCode","useState","validationSchema","Yup","shape","of","required","useEffect","current","push","inputElement","document","querySelector","focus","_jsx","_Fragment","children","Formik","onSubmit","values","id","_id","_ref2","handleChange","handleBlur","handleSubmit","setFieldValue","_jsxs","console","log","FieldArray","name","_ref3","_values$stores","remove","length","map","store","index","className","InputBox","autoFocus","label","placeholder","type","readOnly","value","Button","danger","onClick","ButtonBox","Modal","open","onCancel","footer","QrReader","scanDelay","onResult","result","text","style","width","facingMode","FormDataLaps","errors","Number","String","onChange","obj","target","Option","Select","resource","Lists","_data$data$","_data$data$$platform","_data$data$4","fetch","data","useFetchByLoad","edit","patchData","patchLoading","usePatch","detail","setDetail","search","setSearch","isStockOut","setIsStockOut","options","setOptions","inputValue","setInputValue","selectedOption","setSelectedOption","initialPlatforms","platform","split","selectedPlatforms","setSelectedPlatforms","savedInputValue","localStorage","getItem","savedSelectedOption","timer","undefined","count","fetchData","clearTimeout","setTimeout","url","query","JSON","stringify","handleDetailClose","Breadcrumbs","pageName","Input","event","textAlign","Spin","Row","gutter","align","justify","Col","xs","display","flexWrap","justifyContent","Form","Item","margin","Checkbox","Group","checkedValues","_data$data$2","join","marginRight","editLaps","backgroundColor","borderColor","icon","CloseOutlined","marginLeft","alignItems","e","option","setItem","statment","_data$data$3","stockedOutStatment","ViewData","EditDataModal","close"],"sourceRoot":""}